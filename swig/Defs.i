enum REG_NUM
{
  REG_NUM_BASE = 8,
  REG_NUM_GP = REG_NUM_BASE,
  REG_NUM_MM = 8,
  REG_NUM_FPU = 8,
  REG_NUM_XMM = REG_NUM_BASE,
  REG_NUM_SEGMENT = 7
};
enum REG_INDEX
{
  REG_INDEX_MASK = 0x00FF,
  REG_INDEX_EAX = 0,
  REG_INDEX_ECX = 1,
  REG_INDEX_EDX = 2,
  REG_INDEX_EBX = 3,
  REG_INDEX_ESP = 4,
  REG_INDEX_EBP = 5,
  REG_INDEX_ESI = 6,
  REG_INDEX_EDI = 7,
  REG_INDEX_MM0 = 0,
  REG_INDEX_MM1 = 1,
  REG_INDEX_MM2 = 2,
  REG_INDEX_MM3 = 3,
  REG_INDEX_MM4 = 4,
  REG_INDEX_MM5 = 5,
  REG_INDEX_MM6 = 6,
  REG_INDEX_MM7 = 7,
  REG_INDEX_XMM0 = 0,
  REG_INDEX_XMM1 = 1,
  REG_INDEX_XMM2 = 2,
  REG_INDEX_XMM3 = 3,
  REG_INDEX_XMM4 = 4,
  REG_INDEX_XMM5 = 5,
  REG_INDEX_XMM6 = 6,
  REG_INDEX_XMM7 = 7,
  REG_INDEX_ES = 0,
  REG_INDEX_CS = 1,
  REG_INDEX_SS = 2,
  REG_INDEX_DS = 3,
  REG_INDEX_FS = 4,
  REG_INDEX_GS = 5
};
enum REG_TYPE
{
  REG_TYPE_MASK = 0xFF00,
  REG_TYPE_GPB_LO = 0x0100,
  REG_TYPE_GPB_HI = 0x0200,
  REG_TYPE_GPW = 0x1000,
  REG_TYPE_GPD = 0x2000,
  REG_TYPE_GPQ = 0x3000,
  REG_TYPE_GPN = REG_TYPE_GPD,
  REG_TYPE_X87 = 0x5000,
  REG_TYPE_MM = 0x6000,
  REG_TYPE_XMM = 0x7000,
  REG_TYPE_YMM = 0x8000,
  REG_TYPE_SEGMENT = 0xD000
};
enum SEGMENT_PREFIX
{
  SEGMENT_ES = 0,
  SEGMENT_CS = 1,
  SEGMENT_SS = 2,
  SEGMENT_DS = 3,
  SEGMENT_FS = 4,
  SEGMENT_GS = 5,
  SEGMENT_NONE = 0xF,
  _SEGMENT_COUNT = 6
};
enum PREFETCH_HINT
{
  PREFETCH_T0 = 1,
  PREFETCH_T1 = 2,
  PREFETCH_T2 = 3,
  PREFETCH_NTA = 0
};
enum CONDITION
{
  C_NO_CONDITION = -1,
  C_A = 0x7,
  C_AE = 0x3,
  C_B = 0x2,
  C_BE = 0x6,
  C_C = 0x2,
  C_E = 0x4,
  C_G = 0xF,
  C_GE = 0xD,
  C_L = 0xC,
  C_LE = 0xE,
  C_NA = 0x6,
  C_NAE = 0x2,
  C_NB = 0x3,
  C_NBE = 0x7,
  C_NC = 0x3,
  C_NE = 0x5,
  C_NG = 0xE,
  C_NGE = 0xC,
  C_NL = 0xD,
  C_NLE = 0xF,
  C_NO = 0x1,
  C_NP = 0xB,
  C_NS = 0x9,
  C_NZ = 0x5,
  C_O = 0x0,
  C_P = 0xA,
  C_PE = 0xA,
  C_PO = 0xB,
  C_S = 0x8,
  C_Z = 0x4,
  C_OVERFLOW = 0x0,
  C_NO_OVERFLOW = 0x1,
  C_BELOW = 0x2,
  C_ABOVE_EQUAL = 0x3,
  C_EQUAL = 0x4,
  C_NOT_EQUAL = 0x5,
  C_BELOW_EQUAL = 0x6,
  C_ABOVE = 0x7,
  C_SIGN = 0x8,
  C_NOT_SIGN = 0x9,
  C_PARITY_EVEN = 0xA,
  C_PARITY_ODD = 0xB,
  C_LESS = 0xC,
  C_GREATER_EQUAL = 0xD,
  C_LESS_EQUAL = 0xE,
  C_GREATER = 0xF,
  C_ZERO = 0x4,
  C_NOT_ZERO = 0x5,
  C_NEGATIVE = 0x8,
  C_POSITIVE = 0x9,
  C_FP_UNORDERED = 16,
  C_FP_NOT_UNORDERED = 17
};

enum SCALE
{
  TIMES_1 = 0,
  TIMES_2 = 1,
  TIMES_4 = 2,
  TIMES_8 = 3
};
enum HINT
{
  HINT_NONE = 0x00,
  HINT_TAKEN = 0x01,
  HINT_NOT_TAKEN = 0x02
};
enum HINT_BYTE_VALUE
{
  HINT_BYTE_VALUE_TAKEN = 0x3E,
  HINT_BYTE_VALUE_NOT_TAKEN = 0x2E
};
enum FP_STATUS
{
  FP_C0 = 0x100,
  FP_C1 = 0x200,
  FP_C2 = 0x400,
  FP_C3 = 0x4000,
  FP_CC_MASK = 0x4500
};
enum FP_CW
{
  FP_CW_INVOPEX_MASK = 0x001,
  FP_CW_DENOPEX_MASK = 0x002,
  FP_CW_ZERODIV_MASK = 0x004,
  FP_CW_OVFEX_MASK = 0x008,
  FP_CW_UNDFEX_MASK = 0x010,
  FP_CW_PRECEX_MASK = 0x020,
  FP_CW_PRECC_MASK = 0x300,
  FP_CW_ROUNDC_MASK = 0xC00,
  FP_CW_PREC_SINGLE = 0x000,
  FP_CW_PREC_DOUBLE = 0x200,
  FP_CW_PREC_EXTENDED = 0x300,
  FP_CW_ROUND_NEAREST = 0x000,
  FP_CW_ROUND_DOWN = 0x400,
  FP_CW_ROUND_UP = 0x800,
  FP_CW_ROUND_TOZERO = 0xC00
};
enum INST_CODE
{
  INST_ADC,
  INST_ADD,
  INST_ADDPD,
  INST_ADDPS,
  INST_ADDSD,
  INST_ADDSS,
  INST_ADDSUBPD,
  INST_ADDSUBPS,
  INST_AMD_PREFETCH,
  INST_AMD_PREFETCHW,
  INST_AND,
  INST_ANDNPD,
  INST_ANDNPS,
  INST_ANDPD,
  INST_ANDPS,
  INST_BLENDPD,
  INST_BLENDPS,
  INST_BLENDVPD,
  INST_BLENDVPS,
  INST_BSF,
  INST_BSR,
  INST_BSWAP,
  INST_BT,
  INST_BTC,
  INST_BTR,
  INST_BTS,
  INST_CALL,
  INST_CBW,
  INST_CDQE,
  INST_CLC,
  INST_CLD,
  INST_CLFLUSH,
  INST_CMC,
  INST_CMOV,
  INST_CMOVA = INST_CMOV,
  INST_CMOVAE,
  INST_CMOVB,
  INST_CMOVBE,
  INST_CMOVC,
  INST_CMOVE,
  INST_CMOVG,
  INST_CMOVGE,
  INST_CMOVL,
  INST_CMOVLE,
  INST_CMOVNA,
  INST_CMOVNAE,
  INST_CMOVNB,
  INST_CMOVNBE,
  INST_CMOVNC,
  INST_CMOVNE,
  INST_CMOVNG,
  INST_CMOVNGE,
  INST_CMOVNL,
  INST_CMOVNLE,
  INST_CMOVNO,
  INST_CMOVNP,
  INST_CMOVNS,
  INST_CMOVNZ,
  INST_CMOVO,
  INST_CMOVP,
  INST_CMOVPE,
  INST_CMOVPO,
  INST_CMOVS,
  INST_CMOVZ,
  INST_CMP,
  INST_CMPPD,
  INST_CMPPS,
  INST_CMPSD,
  INST_CMPSS,
  INST_CMPXCHG,
  INST_CMPXCHG16B,
  INST_CMPXCHG8B,
  INST_COMISD,
  INST_COMISS,
  INST_CPUID,
  INST_CRC32,
  INST_CVTDQ2PD,
  INST_CVTDQ2PS,
  INST_CVTPD2DQ,
  INST_CVTPD2PI,
  INST_CVTPD2PS,
  INST_CVTPI2PD,
  INST_CVTPI2PS,
  INST_CVTPS2DQ,
  INST_CVTPS2PD,
  INST_CVTPS2PI,
  INST_CVTSD2SI,
  INST_CVTSD2SS,
  INST_CVTSI2SD,
  INST_CVTSI2SS,
  INST_CVTSS2SD,
  INST_CVTSS2SI,
  INST_CVTTPD2DQ,
  INST_CVTTPD2PI,
  INST_CVTTPS2DQ,
  INST_CVTTPS2PI,
  INST_CVTTSD2SI,
  INST_CVTTSS2SI,
  INST_CWDE,
  INST_DAA,
  INST_DAS,
  INST_DEC,
  INST_DIV,
  INST_DIVPD,
  INST_DIVPS,
  INST_DIVSD,
  INST_DIVSS,
  INST_DPPD,
  INST_DPPS,
  INST_EMMS,
  INST_ENTER,
  INST_EXTRACTPS,
  INST_F2XM1,
  INST_FABS,
  INST_FADD,
  INST_FADDP,
  INST_FBLD,
  INST_FBSTP,
  INST_FCHS,
  INST_FCLEX,
  INST_FCMOVB,
  INST_FCMOVBE,
  INST_FCMOVE,
  INST_FCMOVNB,
  INST_FCMOVNBE,
  INST_FCMOVNE,
  INST_FCMOVNU,
  INST_FCMOVU,
  INST_FCOM,
  INST_FCOMI,
  INST_FCOMIP,
  INST_FCOMP,
  INST_FCOMPP,
  INST_FCOS,
  INST_FDECSTP,
  INST_FDIV,
  INST_FDIVP,
  INST_FDIVR,
  INST_FDIVRP,
  INST_FEMMS,
  INST_FFREE,
  INST_FIADD,
  INST_FICOM,
  INST_FICOMP,
  INST_FIDIV,
  INST_FIDIVR,
  INST_FILD,
  INST_FIMUL,
  INST_FINCSTP,
  INST_FINIT,
  INST_FIST,
  INST_FISTP,
  INST_FISTTP,
  INST_FISUB,
  INST_FISUBR,
  INST_FLD,
  INST_FLD1,
  INST_FLDCW,
  INST_FLDENV,
  INST_FLDL2E,
  INST_FLDL2T,
  INST_FLDLG2,
  INST_FLDLN2,
  INST_FLDPI,
  INST_FLDZ,
  INST_FMUL,
  INST_FMULP,
  INST_FNCLEX,
  INST_FNINIT,
  INST_FNOP,
  INST_FNSAVE,
  INST_FNSTCW,
  INST_FNSTENV,
  INST_FNSTSW,
  INST_FPATAN,
  INST_FPREM,
  INST_FPREM1,
  INST_FPTAN,
  INST_FRNDINT,
  INST_FRSTOR,
  INST_FSAVE,
  INST_FSCALE,
  INST_FSIN,
  INST_FSINCOS,
  INST_FSQRT,
  INST_FST,
  INST_FSTCW,
  INST_FSTENV,
  INST_FSTP,
  INST_FSTSW,
  INST_FSUB,
  INST_FSUBP,
  INST_FSUBR,
  INST_FSUBRP,
  INST_FTST,
  INST_FUCOM,
  INST_FUCOMI,
  INST_FUCOMIP,
  INST_FUCOMP,
  INST_FUCOMPP,
  INST_FWAIT,
  INST_FXAM,
  INST_FXCH,
  INST_FXRSTOR,
  INST_FXSAVE,
  INST_FXTRACT,
  INST_FYL2X,
  INST_FYL2XP1,
  INST_HADDPD,
  INST_HADDPS,
  INST_HSUBPD,
  INST_HSUBPS,
  INST_IDIV,
  INST_IMUL,
  INST_INC,
  INST_INT3,
  INST_J,
  INST_JA =
    INST_J,
  INST_JAE,
  INST_JB,
  INST_JBE,
  INST_JC,
  INST_JE,
  INST_JG,
  INST_JGE,
  INST_JL,
  INST_JLE,
  INST_JNA,
  INST_JNAE,
  INST_JNB,
  INST_JNBE,
  INST_JNC,
  INST_JNE,
  INST_JNG,
  INST_JNGE,
  INST_JNL,
  INST_JNLE,
  INST_JNO,
  INST_JNP,
  INST_JNS,
  INST_JNZ,
  INST_JO,
  INST_JP,
  INST_JPE,
  INST_JPO,
  INST_JS,
  INST_JZ,
  INST_JMP,
  INST_LDDQU,
  INST_LDMXCSR,
  INST_LAHF,
  INST_LEA,
  INST_LEAVE,
  INST_LFENCE,
  INST_MASKMOVDQU,
  INST_MASKMOVQ,
  INST_MAXPD,
  INST_MAXPS,
  INST_MAXSD,
  INST_MAXSS,
  INST_MFENCE,
  INST_MINPD,
  INST_MINPS,
  INST_MINSD,
  INST_MINSS,
  INST_MONITOR,
  INST_MOV,
  INST_MOVAPD,
  INST_MOVAPS,
  INST_MOVBE,
  INST_MOVD,
  INST_MOVDDUP,
  INST_MOVDQ2Q,
  INST_MOVDQA,
  INST_MOVDQU,
  INST_MOVHLPS,
  INST_MOVHPD,
  INST_MOVHPS,
  INST_MOVLHPS,
  INST_MOVLPD,
  INST_MOVLPS,
  INST_MOVMSKPD,
  INST_MOVMSKPS,
  INST_MOVNTDQ,
  INST_MOVNTDQA,
  INST_MOVNTI,
  INST_MOVNTPD,
  INST_MOVNTPS,
  INST_MOVNTQ,
  INST_MOVQ,
  INST_MOVQ2DQ,
  INST_MOVSD,
  INST_MOVSHDUP,
  INST_MOVSLDUP,
  INST_MOVSS,
  INST_MOVSX,
  INST_MOVSXD,
  INST_MOVUPD,
  INST_MOVUPS,
  INST_MOVZX,
  INST_MOV_PTR,
  INST_MPSADBW,
  INST_MUL,
  INST_MULPD,
  INST_MULPS,
  INST_MULSD,
  INST_MULSS,
  INST_MWAIT,
  INST_NEG,
  INST_NOP,
  INST_NOT,
  INST_OR,
  INST_ORPD,
  INST_ORPS,
  INST_PABSB,
  INST_PABSD,
  INST_PABSW,
  INST_PACKSSDW,
  INST_PACKSSWB,
  INST_PACKUSDW,
  INST_PACKUSWB,
  INST_PADDB,
  INST_PADDD,
  INST_PADDQ,
  INST_PADDSB,
  INST_PADDSW,
  INST_PADDUSB,
  INST_PADDUSW,
  INST_PADDW,
  INST_PALIGNR,
  INST_PAND,
  INST_PANDN,
  INST_PAUSE,
  INST_PAVGB,
  INST_PAVGW,
  INST_PBLENDVB,
  INST_PBLENDW,
  INST_PCMPEQB,
  INST_PCMPEQD,
  INST_PCMPEQQ,
  INST_PCMPEQW,
  INST_PCMPESTRI,
  INST_PCMPESTRM,
  INST_PCMPGTB,
  INST_PCMPGTD,
  INST_PCMPGTQ,
  INST_PCMPGTW,
  INST_PCMPISTRI,
  INST_PCMPISTRM,
  INST_PEXTRB,
  INST_PEXTRD,
  INST_PEXTRQ,
  INST_PEXTRW,
  INST_PF2ID,
  INST_PF2IW,
  INST_PFACC,
  INST_PFADD,
  INST_PFCMPEQ,
  INST_PFCMPGE,
  INST_PFCMPGT,
  INST_PFMAX,
  INST_PFMIN,
  INST_PFMUL,
  INST_PFNACC,
  INST_PFPNACC,
  INST_PFRCP,
  INST_PFRCPIT1,
  INST_PFRCPIT2,
  INST_PFRSQIT1,
  INST_PFRSQRT,
  INST_PFSUB,
  INST_PFSUBR,
  INST_PHADDD,
  INST_PHADDSW,
  INST_PHADDW,
  INST_PHMINPOSUW,
  INST_PHSUBD,
  INST_PHSUBSW,
  INST_PHSUBW,
  INST_PI2FD,
  INST_PI2FW,
  INST_PINSRB,
  INST_PINSRD,
  INST_PINSRQ,
  INST_PINSRW,
  INST_PMADDUBSW,
  INST_PMADDWD,
  INST_PMAXSB,
  INST_PMAXSD,
  INST_PMAXSW,
  INST_PMAXUB,
  INST_PMAXUD,
  INST_PMAXUW,
  INST_PMINSB,
  INST_PMINSD,
  INST_PMINSW,
  INST_PMINUB,
  INST_PMINUD,
  INST_PMINUW,
  INST_PMOVMSKB,
  INST_PMOVSXBD,
  INST_PMOVSXBQ,
  INST_PMOVSXBW,
  INST_PMOVSXDQ,
  INST_PMOVSXWD,
  INST_PMOVSXWQ,
  INST_PMOVZXBD,
  INST_PMOVZXBQ,
  INST_PMOVZXBW,
  INST_PMOVZXDQ,
  INST_PMOVZXWD,
  INST_PMOVZXWQ,
  INST_PMULDQ,
  INST_PMULHRSW,
  INST_PMULHUW,
  INST_PMULHW,
  INST_PMULLD,
  INST_PMULLW,
  INST_PMULUDQ,
  INST_POP,
  INST_POPAD,
  INST_POPCNT,
  INST_POPFD,
  INST_POPFQ,
  INST_POR,
  INST_PREFETCH,
  INST_PSADBW,
  INST_PSHUFB,
  INST_PSHUFD,
  INST_PSHUFW,
  INST_PSHUFHW,
  INST_PSHUFLW,
  INST_PSIGNB,
  INST_PSIGND,
  INST_PSIGNW,
  INST_PSLLD,
  INST_PSLLDQ,
  INST_PSLLQ,
  INST_PSLLW,
  INST_PSRAD,
  INST_PSRAW,
  INST_PSRLD,
  INST_PSRLDQ,
  INST_PSRLQ,
  INST_PSRLW,
  INST_PSUBB,
  INST_PSUBD,
  INST_PSUBQ,
  INST_PSUBSB,
  INST_PSUBSW,
  INST_PSUBUSB,
  INST_PSUBUSW,
  INST_PSUBW,
  INST_PSWAPD,
  INST_PTEST,
  INST_PUNPCKHBW,
  INST_PUNPCKHDQ,
  INST_PUNPCKHQDQ,
  INST_PUNPCKHWD,
  INST_PUNPCKLBW,
  INST_PUNPCKLDQ,
  INST_PUNPCKLQDQ,
  INST_PUNPCKLWD,
  INST_PUSH,
  INST_PUSHAD,
  INST_PUSHFD,
  INST_PUSHFQ,
  INST_PXOR,
  INST_RCL,
  INST_RCPPS,
  INST_RCPSS,
  INST_RCR,
  INST_RDTSC,
  INST_RDTSCP,
  INST_REP_LODSB,
  INST_REP_LODSD,
  INST_REP_LODSQ,
  INST_REP_LODSW,
  INST_REP_MOVSB,
  INST_REP_MOVSD,
  INST_REP_MOVSQ,
  INST_REP_MOVSW,
  INST_REP_STOSB,
  INST_REP_STOSD,
  INST_REP_STOSQ,
  INST_REP_STOSW,
  INST_REPE_CMPSB,
  INST_REPE_CMPSD,
  INST_REPE_CMPSQ,
  INST_REPE_CMPSW,
  INST_REPE_SCASB,
  INST_REPE_SCASD,
  INST_REPE_SCASQ,
  INST_REPE_SCASW,
  INST_REPNE_CMPSB,
  INST_REPNE_CMPSD,
  INST_REPNE_CMPSQ,
  INST_REPNE_CMPSW,
  INST_REPNE_SCASB,
  INST_REPNE_SCASD,
  INST_REPNE_SCASQ,
  INST_REPNE_SCASW,
  INST_RET,
  INST_ROL,
  INST_ROR,
  INST_ROUNDPD,
  INST_ROUNDPS,
  INST_ROUNDSD,
  INST_ROUNDSS,
  INST_RSQRTPS,
  INST_RSQRTSS,
  INST_SAHF,
  INST_SAL,
  INST_SAR,
  INST_SBB,
  INST_SET,
  INST_SETA=INST_SET,
  INST_SETAE,
  INST_SETB,
  INST_SETBE,
  INST_SETC,
  INST_SETE,
  INST_SETG,
  INST_SETGE,
  INST_SETL,
  INST_SETLE,
  INST_SETNA,
  INST_SETNAE,
  INST_SETNB,
  INST_SETNBE,
  INST_SETNC,
  INST_SETNE,
  INST_SETNG,
  INST_SETNGE,
  INST_SETNL,
  INST_SETNLE,
  INST_SETNO,
  INST_SETNP,
  INST_SETNS,
  INST_SETNZ,
  INST_SETO,
  INST_SETP,
  INST_SETPE,
  INST_SETPO,
  INST_SETS,
  INST_SETZ,
  INST_SFENCE,
  INST_SHL,
  INST_SHLD,
  INST_SHR,
  INST_SHRD,
  INST_SHUFPD,
  INST_SHUFPS,
  INST_SQRTPD,
  INST_SQRTPS,
  INST_SQRTSD,
  INST_SQRTSS,
  INST_STC,
  INST_STD,
  INST_STMXCSR,
  INST_SUB,
  INST_SUBPD,
  INST_SUBPS,
  INST_SUBSD,
  INST_SUBSS,
  INST_TEST,
  INST_UCOMISD,
  INST_UCOMISS,
  INST_UD2,
  INST_UNPCKHPD,
  INST_UNPCKHPS,
  INST_UNPCKLPD,
  INST_UNPCKLPS,
  INST_XADD,
  INST_XCHG,
  INST_XOR,
  INST_XORPD,
  INST_XORPS,
  _INST_COUNT,
  _INST_J_BEGIN = INST_J,
  _INST_J_END = INST_JMP
};
ASMJIT_API extern const char instructionName[];
struct InstructionDescription
{
  enum G
  {
    G_EMIT,
    G_ALU,
    G_BSWAP,
    G_BT,
    G_CALL,
    G_CRC32,
    G_ENTER,
    G_IMUL,
    G_INC_DEC,
    G_J,
    G_JMP,
    G_LEA,
    G_M,
    G_MOV,
    G_MOV_PTR,
    G_MOVSX_MOVZX,
    G_MOVSXD,
    G_PUSH,
    G_POP,
    G_R_RM,
    G_RM_B,
    G_RM,
    G_RM_R,
    G_REP,
    G_RET,
    G_ROT,
    G_SHLD_SHRD,
    G_TEST,
    G_XCHG,
    G_X87_FPU,
    G_X87_STI,
    G_X87_MEM_STI,
    G_X87_MEM,
    G_X87_FSTSW,
    G_MOVBE,
    G_MMU_MOV,
    G_MMU_MOVD,
    G_MMU_MOVQ,
    G_MMU_PEXTR,
    G_MMU_PREFETCH,
    G_MMU_RMI,
    G_MMU_RM_IMM8,
    G_MMU_RM_3DNOW
  };
  enum F
  {
    F_NONE = 0x00,
    F_JUMP = 0x01,
    F_MOV = 0x02,
    F_FPU = 0x04,
    F_LOCKABLE = 0x08,
    F_SPECIAL = 0x10,
    F_SPECIAL_MEM = 0x20
  };
  enum O
  {
    O_GB = 0x0001,
    O_GW = 0x0002,
    O_GD = 0x0004,
    O_GQ = 0x0008,
    O_MM = 0x0010,
    O_XMM = 0x0020,
    O_MEM = 0x0040,
    O_IMM = 0x0080,
    O_GB_MEM = O_GB | O_MEM,
    O_GW_MEM = O_GW | O_MEM,
    O_GD_MEM = O_GD | O_MEM,
    O_GQ_MEM = O_GQ | O_MEM,
    O_GQDWB = O_GQ | O_GD | O_GW | O_GB,
    O_GQDW = O_GQ | O_GD | O_GW,
    O_GQD = O_GQ | O_GD,
    O_GWB = O_GW | O_GB,
    O_GQDWB_MEM = O_GQDWB | O_MEM,
    O_GQDW_MEM = O_GQDW | O_MEM,
    O_GQD_MEM = O_GQD | O_MEM,
    O_GWB_MEM = O_GWB | O_MEM,
    O_MM_MEM = O_MM | O_MEM,
    O_XMM_MEM = O_XMM | O_MEM,
    O_MM_XMM = O_MM | O_XMM,
    O_MM_XMM_MEM = O_MM | O_XMM | O_MEM,
    O_FM_2 = O_MEM | 0x0100,
    O_FM_4 = O_MEM | 0x0200,
    O_FM_8 = O_MEM | 0x0400,
    O_FM_10 = O_MEM | 0x0800,
    O_FM_2_4 = O_FM_2 | O_FM_4,
    O_FM_2_4_8 = O_FM_2 | O_FM_4 | O_FM_8,
    O_FM_4_8 = O_FM_4 | O_FM_8,
    O_FM_4_8_10 = O_FM_4 | O_FM_8 | O_FM_10,
    O_NOREX = 0x2000
  };
  uint16_t code;
  uint16_t nameIndex;
  uint8_t group;
  uint8_t flags;
  uint16_t oflags[2];
  uint16_t opCodeR;
  uint32_t opCode[2];
  inline const char* getName() const { return instructionName + nameIndex; }
  inline bool isJump() const { return (flags & F_JUMP) != 0; }
  inline bool isMov() const { return (flags & F_MOV) != 0; }
  inline bool isFPU() const { return (flags & F_FPU) != 0; }
  inline bool isLockable() const { return (flags & F_LOCKABLE) != 0; }
  inline bool isSpecial() const { return (flags & F_SPECIAL) != 0; }
  inline bool isSpecialMem() const { return (flags & F_SPECIAL_MEM) != 0; }
};

ASMJIT_API extern const InstructionDescription instructionDescription[];
enum EMIT_OPTIONS
{
  EMIT_OPTION_REX_PREFIX = (1 << 0),
  EMIT_OPTION_LOCK_PREFIX = (1 << 1),
  EMIT_OPTION_SHORT_JUMP = (1 << 2)
};
enum CALL_CONV
{
  CALL_CONV_NONE = 0,
  CALL_CONV_X64W = 1,
  CALL_CONV_X64U = 2,
  CALL_CONV_CDECL = 3,
  CALL_CONV_STDCALL = 4,
  CALL_CONV_MSTHISCALL = 5,
  CALL_CONV_MSFASTCALL = 6,
  CALL_CONV_BORLANDFASTCALL = 7,
  CALL_CONV_GCCFASTCALL = 8,
  CALL_CONV_GCCREGPARM_1 = 9,
  CALL_CONV_GCCREGPARM_2 = 10,
  CALL_CONV_GCCREGPARM_3 = 11,
  CALL_CONV_DEFAULT = CALL_CONV_CDECL,
  CALL_CONV_COMPAT_FASTCALL = CALL_CONV_GCCFASTCALL,
  CALL_CONV_COMPAT_STDCALL = CALL_CONV_STDCALL,
  CALL_CONV_COMPAT_CDECL = CALL_CONV_CDECL
};
enum VARIABLE_TYPE
{
  VARIABLE_TYPE_GPD = 0,
  VARIABLE_TYPE_GPQ = 1,
  VARIABLE_TYPE_GPN = VARIABLE_TYPE_GPD,
  VARIABLE_TYPE_X87 = 2,
  VARIABLE_TYPE_X87_1F = 3,
  VARIABLE_TYPE_X87_1D = 4,
  VARIABLE_TYPE_MM = 5,
  VARIABLE_TYPE_XMM = 6,
  VARIABLE_TYPE_XMM_1F = 7,
  VARIABLE_TYPE_XMM_4F = 8,
  VARIABLE_TYPE_XMM_1D = 9,
  VARIABLE_TYPE_XMM_2D = 10,
  _VARIABLE_TYPE_COUNT = 11,
  VARIABLE_TYPE_INT32 = VARIABLE_TYPE_GPD,
  VARIABLE_TYPE_INT64 = VARIABLE_TYPE_GPQ,
  VARIABLE_TYPE_INTPTR = VARIABLE_TYPE_GPN,
  VARIABLE_TYPE_FLOAT = VARIABLE_TYPE_X87_1F,
  VARIABLE_TYPE_DOUBLE = VARIABLE_TYPE_X87_1D
};
enum VARIABLE_HINT
{
  VARIABLE_HINT_ALLOC = 0,
  VARIABLE_HINT_SPILL = 1,
  VARIABLE_HINT_SAVE = 2,
  VARIABLE_HINT_SAVE_AND_UNUSE = 3,
  VARIABLE_HINT_UNUSE = 4
};
